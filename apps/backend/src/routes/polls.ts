import express from 'express';
import Poll, { IPoll } from '../models/Poll';
import Response from '../models/Response';

const router = express.Router();

// Get all polls for a meeting
router.get('/meeting/:meetingId', async (req, res) => {
  try {
    const polls = await Poll.find({ meetingId: req.params.meetingId }).sort({ createdAt: -1 });
    res.json(polls);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error });
  }
});

// Create a new poll
router.post('/', async (req, res) => {
  try {
    const { meetingId, question, options, correctOption, isAutoGenerated } = req.body;
    
    const newPoll = new Poll({
      meetingId,
      question,
      options,
      correctOption,
      isAutoGenerated
    });
    
    const savedPoll = await newPoll.save();
    res.status(201).json(savedPoll);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error });
  }
});

// End a poll
router.patch('/:pollId/end', async (req, res) => {
  try {
    const poll = await Poll.findById(req.params.pollId);
    
    if (!poll) {
      return res.status(404).json({ message: 'Poll not found' });
    }
    
    poll.endedAt = new Date();
    const updatedPoll = await poll.save();
    
    res.json(updatedPoll);
  } catch (error) {
    res.status(500).json({ message: 'Server error', error });
  }
});

// Get poll results
router.get('/:pollId/results', async (req, res) => {
  try {
    const poll = await Poll.findById(req.params.pollId);
    
    if (!poll) {
      return res.status(404).json({ message: 'Poll not found' });
    }
    
    const responses = await Response.find({ pollId: req.params.pollId });
    
    // Count responses for each option
    const results = poll.options.map((_, index) => {
      return {
        option: index,
        count: responses.filter(r => r.answer === index).length
      };
    });
    
    // Calculate average response time
    const totalResponseTime = responses.reduce((sum, r) => sum + r.responseTime, 0);
    const averageResponseTime = responses.length > 0 ? totalResponseTime / responses.length : 0;
    
    res.json({
      poll,
      results,
      totalResponses: responses.length,
      averageResponseTime
    });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error });
  }
});

export default router;